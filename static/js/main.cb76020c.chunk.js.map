{"version":3,"sources":["logo.svg","logoMobile.svg","components/CustomBtn.js","components/WalletCard.js","components/NavBar.js","components/Footer.js","components/Exchanger.js","components/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["StyledButton","withStyles","root","display","alignItems","justifyContent","height","padding","boxSizing","borderRadius","background","color","transform","boxShadow","transition","backgroundColor","cursor","label","textTransform","Button","CustomBtn","props","onClick","disabled","variant","txt","styles","makeStyles","container","position","dropdown","right","left","width","zIindex","ul_style","listStyle","margin","li_style","Moralis","require","WalletCard","classes","useState","connButtonText","setConnButtonText","setDefaultAccount","setUserBalance","showResults","setShowResults","a","user","User","current","authenticate","signingMessage","then","console","log","get","catch","error","accounthandler","onUserChange","account","acc_address","Web3API","getNativeBalance","chain","balance","toFixed","substring","concat","length","logOut","start","serverUrl","appId","className","useStyles","bar","paddingTop","flexDirection","logo","logoMobile","menuItem","flexGrow","paddingBottom","NavBar","handleUserChange","bind","state","currentUser","user_","this","setState","onFinalUserChange","Toolbar","src","Typography","React","Component","Footer","BottomNavigation","BottomNavigationAction","value","icon","style","fill","Exchanger","currentIndex","imgUrls","selectedNFT","secondAddress","nftAddresses","nftIds","swapId","swapUser","swapUser2","secondUserApproval","closeModal","findNext","findPrev","renderImageContent","extractnft","startExchange","getNFTs","NFT","i","result","url","token_uri","fetch","res","json","out","image","token_address","token_id","index","e","openModal","onNFTChange","undefined","preventDefault","prevState","enableWeb3","options","contractAddress","functionName","abi","params","operator","approved","executeFunction","secondUser","nftAmounts","msgValue","wait","blockHash","parseInt","logs","topics","onSwapChange","sendFunction","_swapId","transaction","map","type","onChange","handleChange","target","acceptExchange","confirmExchange","Chat","connect","peer","Peer","swapUserSent","on","id","myId","conn","data","nftReceived","nft","messages","send","friendId","msgObj","sender","message","nftSent","swapIdSent","swapUser2Sent","visited","prevProps","nftSrc","theme","createMuiTheme","palette","primary","main","secondary","typography","fontFamily","h4","fontWeight","fontSize","lineHeight","h5","App","handleNFTChange","handleSwapChange","nftSentSrc","swapId_","swapUser_","swapUser2_","ThemeProvider","wrapper","bigSpace","littleSpace","textAlign","marginTop","grid","flexWrap","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb76020c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.7f799ddd.svg\";","export default __webpack_public_path__ + \"static/media/logoMobile.1b06bd40.svg\";","import React from \"react\"\r\nimport {Button} from '@material-ui/core'\r\nimport {withStyles} from '@material-ui/core/styles'\r\n\r\nconst StyledButton = withStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"44px\",\r\n        padding: \"0 25px\",\r\n        boxSizing: \"border-box\",\r\n        borderRadius: 0, \r\n        background: \"#4f25f7\",\r\n        color: \"#fff\",\r\n        transform: \"none\",\r\n        boxShadow: \"6px 6px 0 0 #c7d8ed\",\r\n        transition: \"background .3s,border-color .3s,color .3s\",\r\n        \"&:hover\": {\r\n            backgroundColor:  \"#4f25f7\"\r\n          },\r\n        \"&:disabled\": {\r\n            background:  \"#fff\",\r\n            color: \"#ccc\",\r\n            cursor: \"no-drop\",\r\n        },\r\n    },\r\n    label: {\r\n      textTransform: 'capitalize',\r\n    },\r\n  })(Button);\r\n\r\nfunction CustomBtn(props){\r\n    return (\r\n        <StyledButton onClick={props.onClick} \r\n                      disabled={props.disabled}\r\n                      variant=\"contained\">\r\n            {props.txt}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default CustomBtn","import React, {useState } from \"react\"\r\nimport CustomBtn from './CustomBtn';\r\nimport {makeStyles} from \"@material-ui/core/styles\"; \r\n\r\nconst styles = makeStyles({\r\n    container:{\r\n        position: \"relative\",\r\n        display: \"inline-block\",\r\n    },\r\n    dropdown:{\r\n        position: \"absolute\",\r\n        right: \"0\",\r\n        left: \"0\",\r\n        width: \"168px\",\r\n        zIindex: \"2\",\r\n    },\r\n    \r\n    ul_style:{\r\n        listStyle: \"none\",\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n    },\r\n\r\n    li_style:{\r\n        padding: \"10px 12px\",\r\n        cursor: \"pointer\",\r\n        background: 'rgba(0,0,0,0.25)',\r\n        '&:hover': {\r\n            background: '#3498db'\r\n          }\r\n    },\r\n\r\n})\r\n\r\nconst Moralis = require('moralis');\r\n\r\nconst WalletCard = (props) =>{\r\n\r\n    const classes = styles();\r\n\r\n    const [connButtonText, setConnButtonText] = useState('Connect Wallet');\r\n    const [defaultAccount, setDefaultAccount] = useState(null);\r\n\tconst [userBalance, setUserBalance] = useState(null);\r\n    const [showResults, setShowResults] = useState(false)\r\n\r\n    // Connect the Moralis server\r\n    const serverUrl = \"https://7wqjkn4step0.usemoralis.com:2053/server\";\r\n    const appId = \"mMGEOLWm7x7ayKaRgIdoNWsreOKAHL0Ulu17qZ8I\";\r\n\r\n    Moralis.start({ serverUrl, appId });\r\n\r\n    /* Authentication code */\r\n    async function login() {\r\n        let user = Moralis.User.current();\r\n        if (!user) {\r\n            user = await Moralis.authenticate({ signingMessage: \"Log in using Moralis\" })\r\n            .then(function (user) {\r\n                console.log(\"logged in user:\", user);\r\n                console.log(user.get(\"ethAddress\"));\r\n            })\r\n            .catch(function (error) {\r\n            console.log(error);\r\n            });\r\n        }\r\n        \r\n        await accounthandler(user)\r\n        if(user) setShowResults(!showResults);\r\n        props.onUserChange(user.get(\"ethAddress\"));\r\n    }\r\n\r\n    async function accounthandler(account) {\r\n        \r\n        const acc_address = account.get(\"ethAddress\");\r\n        setDefaultAccount(acc_address);\r\n        \r\n        const balance = await Moralis.Web3API.account.getNativeBalance({chain: \"rinkeby\"}); \r\n        setUserBalance((balance.balance/10**18).toFixed(3));\r\n\r\n        console.log(acc_address);\r\n        setConnButtonText((acc_address.substring(0,6)).concat(\r\n            \" . . . \", \r\n            (acc_address.substring(acc_address.length-6,acc_address.length))\r\n        )); \r\n                     \r\n    }\r\n\r\n\r\n    async function logOut() {\r\n        await Moralis.User.logOut();\r\n        console.log(\"logged out\");\r\n        setConnButtonText('Connect Wallet');\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div className={classes.container}>\r\n\t\t\t<CustomBtn onClick={login} txt={connButtonText}/>\r\n            {showResults && (\r\n                <div className={classes.dropdown}>\r\n                    <ul className={classes.ul_style}>\r\n                        <li className={classes.li_style}>\r\n                            Option 1\r\n                        </li>\r\n                        <li className={classes.li_style}>\r\n                            Option 2\r\n                        </li>\r\n                        <li className={classes.li_style}>\r\n                            Option 3\r\n                        </li>\r\n                        <li className={classes.li_style}>\r\n                            <div onClick={logOut}>Log Out</div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            )}\r\n\r\n        </div>\r\n     )\r\n}\r\n           /* <Typography variant=\"h6\" className='accountDisplay'>\r\n\t\t\t\tAddress: {defaultAccount}\r\n\t\t\t</Typography>\r\n            <Typography variant=\"h6\" className='balanceDisplay'>\r\n\t\t\t\tBalance: {userBalance}\r\n\t\t\t</Typography>*/\r\nexport default WalletCard;","import React from 'react'\r\nimport logo from '../logo.svg'\r\nimport logoMobile from '../logoMobile.svg'\r\nimport {Toolbar, Typography} from '@material-ui/core'\r\nimport {withStyles} from \"@material-ui/core/styles\"; \r\nimport WalletCard from './WalletCard'\r\n\r\nconst useStyles = {\r\n    bar:{\r\n        paddingTop: \"1.15rem\",\r\n        backgroundColor: \"#fff\",\r\n        ['@media (max-width:780px)']: { \r\n           flexDirection: \"column\"\r\n          }\r\n    },\r\n    logo: {\r\n        width: \"15%\", \r\n        ['@media (max-width:780px)']: { \r\n           display: \"none\"\r\n           }\r\n    },\r\n    logoMobile:{\r\n        width: \"100%\", \r\n        display: \"none\", \r\n        ['@media (max-width:780px)']: { \r\n            display: \"inline-block\"\r\n            }\r\n    },\r\n    menuItem: {\r\n        cursor: \"pointer\", \r\n        flexGrow: 1,\r\n        \"&:hover\": {\r\n            color:  \"#4f25c8\"\r\n        },\r\n        ['@media (max-width:780px)']: { \r\n            paddingBottom: \"1rem\"    }\r\n    }\r\n}\r\n\r\nclass NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleUserChange = this.handleUserChange.bind(this);\r\n        this.state = {currentUser: null};\r\n      }\r\n\r\n    handleUserChange(user_){\r\n        this.setState({currentUser: user_});\r\n        this.props.onFinalUserChange(this.state.currentUser);\r\n      }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        \r\n        return (\r\n                <Toolbar position=\"sticky\" color=\"rgba(0, 0, 0, 0.87)\" className={classes.bar}>   \r\n                    <img src={logo} className={classes.logo}/> \r\n                    <img src={logoMobile} className={classes.logoMobile}/> \r\n                    <Typography variant=\"h6\" className={classes.menuItem}>\r\n                    About\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" className={classes.menuItem}>\r\n                        Blog\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" className={classes.menuItem}>\r\n                        Demos \r\n                    </Typography>\r\n                    <Typography variant=\"h6\" className={classes.menuItem}>\r\n                        Contact Us \r\n                    </Typography>\r\n                    <WalletCard\r\n                        onUserChange={this.handleUserChange}/>\r\n                </Toolbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(NavBar)","import React from 'react'\r\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\n\r\nfunction Footer() {\r\n    return ( \r\n        <BottomNavigation >\r\n          <BottomNavigationAction color=\"red\" label=\"Facebook\" value=\"recents\" icon={<FacebookIcon  style={{fill: \"#3b5998\"}}/>} />\r\n          <BottomNavigationAction label=\"Twitter\" value=\"favorites\" icon={<TwitterIcon  style={{fill: \"#1DA1F2\"}}/>} />\r\n          <BottomNavigationAction label=\"Instagram\" value=\"nearby\" icon={<InstagramIcon  style={{fill: \" #C13584\"}}/>} />\r\n          <BottomNavigationAction label=\"YouTube\" value=\"folder\" icon={<YouTubeIcon  style={{fill: \"#c4302b\"}}/>} />\r\n        </BottomNavigation>\r\n     )\r\n}\r\n\r\nexport default Footer;","import React from \"react\"\r\nimport \"./Exchanger.css\";\r\nimport CustomBtn from './CustomBtn';\r\n\r\nconst Moralis = require('moralis');\r\n\r\n// Connect the Moralis server\r\nconst serverUrl = \"https://7wqjkn4step0.usemoralis.com:2053/server\";\r\nconst appId = \"mMGEOLWm7x7ayKaRgIdoNWsreOKAHL0Ulu17qZ8I\";\r\n//const Web3 = require('web3');\r\n\r\nMoralis.start({ serverUrl, appId });\r\n\r\nclass Exchanger extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { currentIndex: null,\r\n                     imgUrls: [],\r\n                     currentUser: null,\r\n                     selectedNFT: null,\r\n                     secondAddress: \"\", \r\n                     nftAddresses: [],\r\n                     nftIds: [],\r\n                     swapId: null,\r\n                     swapUser: null,\r\n                     swapUser2: null,\r\n                     secondUserApproval: null,\r\n                    };\r\n      this.closeModal = this.closeModal.bind(this);\r\n      this.findNext = this.findNext.bind(this);\r\n      this.findPrev = this.findPrev.bind(this);\r\n      this.renderImageContent = this.renderImageContent.bind(this);\r\n      this.extractnft = this.extractnft.bind(this);\r\n      this.startExchange = this.startExchange.bind(this);\r\n    }\r\n    \r\n    async extractnft(){\r\n        let account = Moralis.User.current();\r\n        console.log(\"Here is the account\", account.get(\"ethAddress\"));\r\n        //this.setState({currentUser: account.get(\"ethAddress\")});\r\n        \r\n        if(account){\r\n          const NFT = await Moralis.Web3API.account.getNFTs({chain: \"rinkeby\"});\r\n          let i = 0;\r\n          while(i< NFT.result.length){\r\n              let url = NFT.result[i].token_uri;              \r\n              await fetch(url)\r\n              .then(res => res.json())\r\n              .then(out =>{\r\n                  if(out.image)\r\n                  {\r\n                    //console.log(url);\r\n                    this.setState(state => ({\r\n                      imgUrls: [...state.imgUrls, out.image]\r\n                    }))\r\n                    this.setState(state => ({\r\n                      nftAddresses: [...state.nftAddresses, NFT.result[i].token_address]\r\n                    }))\r\n                    this.setState(state => ({\r\n                      nftIds: [...state.nftIds, NFT.result[i].token_id]\r\n                    }))\r\n                  }\r\n              })\r\n              .catch(error =>{\r\n                  //console.log(error);\r\n              });\r\n              i++;\r\n          }\r\n        }\r\n    }\r\n\r\n    renderImageContent(src, index) {\r\n        return (\r\n          <div onClick={(e) => this.openModal(e, index, src)}>\r\n            <img src={src} key={src} />\r\n          </div>\r\n        ) \r\n      }\r\n      \r\n      openModal(e, index, src) {\r\n        this.setState ({ currentIndex: index });\r\n        this.setState({selectedNFT: src});\r\n        this.props.onNFTChange(src);\r\n      }\r\n      \r\n      closeModal(e) {\r\n        if (e != undefined) {\r\n          e.preventDefault();\r\n        }\r\n        this.setState ({ currentIndex: null });\r\n      }\r\n      \r\n      findPrev(e) {\r\n        if (e != undefined) {\r\n          e.preventDefault();\r\n        }\r\n        this.setState(prevState => ({\r\n            currentIndex: prevState.currentIndex -1\r\n          }));\r\n      }\r\n      \r\n      findNext(e) {\r\n        if (e != undefined) {\r\n          e.preventDefault();\r\n        }\r\n        this.setState(prevState => ({\r\n            currentIndex: prevState.currentIndex + 1\r\n          }));\r\n      }\r\n      \r\n      handleChange(value) {\r\n        this.setState({secondAddress: value});\r\n      }\r\n\r\n      async approve(nftAddresses){\r\n        await Moralis.enableWeb3();\r\n\r\n        let options = {\r\n          contractAddress: nftAddresses,\r\n          functionName:\"setApprovalForAll\",\r\n          abi:[{\r\n              \"inputs\": [\r\n                {\r\n                  \"internalType\": \"address\",\r\n                  \"name\": \"operator\",\r\n                  \"type\": \"address\"\r\n                },\r\n                {\r\n                  \"internalType\": \"bool\",\r\n                  \"name\": \"approved\",\r\n                  \"type\": \"bool\"\r\n                }\r\n              ],\r\n              \"name\": \"setApprovalForAll\",\r\n              \"outputs\": [],\r\n              \"stateMutability\": \"nonpayable\",\r\n              \"type\": \"function\"\r\n            }],\r\n          params:{\r\n            operator: \"0x02f40094De2Df2a34609897c9D8a364Aa976427d\",\r\n            approved: true\r\n          },\r\n        }\r\n        await Moralis.executeFunction(options);        \r\n        \r\n      }\r\n\r\n      async startExchange(secondAddress, nftAddresses, nftIds){\r\n        await Moralis.enableWeb3();\r\n\r\n        let options = {\r\n          contractAddress: \"0x02f40094De2Df2a34609897c9D8a364Aa976427d\",\r\n          functionName:\"startExchange\",\r\n          abi:[{\r\n              \"inputs\": [\r\n                {\r\n                  \"internalType\": \"address\",\r\n                  \"name\": \"secondUser\",\r\n                  \"type\": \"address\"\r\n                },\r\n                {\r\n                  \"internalType\": \"address[]\",\r\n                  \"name\": \"nftAddresses\",\r\n                  \"type\": \"address[]\"\r\n                },\r\n                {\r\n                  \"internalType\": \"uint256[]\",\r\n                  \"name\": \"nftIds\",\r\n                  \"type\": \"uint256[]\"\r\n                },\r\n                {\r\n                  \"internalType\": \"uint128[]\",\r\n                  \"name\": \"nftAmounts\",\r\n                  \"type\": \"uint128[]\"\r\n                }\r\n              ],\r\n              \"name\": \"startExchange\",\r\n              \"outputs\": [],\r\n              \"stateMutability\": \"payable\",\r\n              \"type\": \"function\"\r\n          }],\r\n          params:{\r\n            secondUser: secondAddress,\r\n            nftAddresses: nftAddresses,\r\n            nftIds: nftIds,\r\n            nftAmounts: [0]\r\n          },\r\n          msgValue: 100000000000000\r\n        }\r\n        //await this.approve(nftAddresses[0]);\r\n        let result =  await Moralis.executeFunction(options);\r\n        await result.wait(1)\r\n              .then((res) => {\r\n                console.log(result.blockHash);\r\n                console.log(res);\r\n                this.setState({swapId: parseInt(res.logs[2].topics[3]),\r\n                                swapUser: res.logs[2].topics[1],\r\n                                swapUser2: res.logs[2].topics[2]});\r\n              })\r\n              .catch((e) =>{\r\n                console.log(\"FAILED\");\r\n                console.log(e);\r\n              })\r\n        \r\n        \r\n        this.props.onSwapChange(this.state.swapId, this.state.swapUser, this.state.swapUser2);\r\n        this.state.sendFunction();\r\n      }\r\n\r\n      async acceptExchange(_swapId, nftAddresses, nftIds){\r\n        await Moralis.enableWeb3();\r\n        let options = {\r\n          contractAddress: \"0x02f40094De2Df2a34609897c9D8a364Aa976427d\",\r\n          functionName:\"acceptExchange\",\r\n          abi:[{\r\n              \"inputs\": [\r\n                {\r\n                  \"internalType\": \"uint64\",\r\n                  \"name\": \"swapId\",\r\n                  \"type\": \"uint64\"\r\n                },\r\n                {\r\n                  \"internalType\": \"address[]\",\r\n                  \"name\": \"nftAddresses\",\r\n                  \"type\": \"address[]\"\r\n                },\r\n                {\r\n                  \"internalType\": \"uint256[]\",\r\n                  \"name\": \"nftIds\",\r\n                  \"type\": \"uint256[]\"\r\n                },\r\n                {\r\n                  \"internalType\": \"uint128[]\",\r\n                  \"name\": \"nftAmounts\",\r\n                  \"type\": \"uint128[]\"\r\n                }\r\n              ],\r\n              \"name\": \"acceptExchange\",\r\n              \"outputs\": [],\r\n              \"stateMutability\": \"payable\",\r\n              \"type\": \"function\" \r\n            }],\r\n          params:{\r\n            swapId: _swapId,\r\n            nftAddresses: nftAddresses,\r\n            nftIds: nftIds,\r\n            nftAmounts: [0]\r\n          },\r\n          msgValue: 100000000000000\r\n        }\r\n        //await this.approve(nftAddresses);\r\n        let transaction = await Moralis.executeFunction(options);\r\n        await transaction.wait(1)\r\n              .then(() => {\r\n                console.log(\"transaction done\");\r\n                this.setState({secondUserApproval: true});\r\n              })\r\n              .catch((e) => {\r\n                console.log(e);\r\n                this.setState({secondUserApproval: false});\r\n              })\r\n      }\r\n\r\n      async confirmExchange(_swapId){\r\n        await Moralis.enableWeb3();\r\n        let options = {\r\n          contractAddress: \"0x02f40094De2Df2a34609897c9D8a364Aa976427d\",\r\n          functionName:\"confirmExchange\",\r\n          abi:[{\r\n              \"inputs\": [\r\n                {\r\n                  \"internalType\": \"uint64\",\r\n                  \"name\": \"swapId\",\r\n                  \"type\": \"uint64\"\r\n                }\r\n              ],\r\n              \"name\": \"confirmExchange\",\r\n              \"outputs\": [],\r\n              \"stateMutability\": \"nonpayable\",\r\n              \"type\": \"function\"\r\n            }],\r\n          params:{\r\n            swapId: _swapId\r\n          },\r\n        }\r\n        await Moralis.executeFunction(options);\r\n      }\r\n\r\n      render(){\r\n        this.setState({currentUser: this.props.user})\r\n        return ( \r\n            <div className= \"gallery-container\">\r\n                <div className=\"gallery-grid\">\r\n                    {this.state.imgUrls.map(this.renderImageContent)}\r\n                </div>  \r\n                \r\n                <div className=\"button-center\">\r\n                  <CustomBtn onClick={this.extractnft} txt=\"Load NFTs\"/>\r\n                </div>\r\n                <div >\r\n                  <h3>The NFT selected for trade</h3>\r\n                  <img src={this.state.imgUrls[this.state.currentIndex]} width={250} height={250} />\r\n                </div>\r\n                \r\n                <div >\r\n                  <h3>The recipient address</h3>\r\n                  <input\r\n                      type=\"text\"\r\n                      value={this.state.secondAddress} \r\n                      onChange={e => this.handleChange(e.target.value)}\r\n                      />\r\n\r\n                    <div className=\"button-center\">\r\n                      <CustomBtn onClick={() => this.startExchange( this.state.secondAddress,\r\n                                                                    [this.state.nftAddresses[this.state.currentIndex]],\r\n                                                                    [this.state.nftIds[this.state.currentIndex]])}\r\n                                 txt=\"Exchange NFTs\"/>\r\n                    </div>\r\n                    <div className=\"button-center\">\r\n                      <CustomBtn  disabled={!this.state.swapId && !(this.state.currentUser==this.state.swapUser2 && this.state.currentUser)}  \r\n                                  onClick={() => this.acceptExchange(this.state.swapId,\r\n                                                                    [this.state.nftAddresses[this.state.currentIndex]],\r\n                                                                    [this.state.nftIds[this.state.currentIndex]])} \r\n                                  txt=\"Approve Exchange\"/>\r\n                      <CustomBtn  disabled={!this.state.secondUserApproval} \r\n                                  onClick={() => this.confirmExchange(this.state.swapId)} \r\n                                  txt=\"Confirm Exchange\"/>\r\n                    </div>\r\n                </div>\r\n                   \r\n            </div>\r\n        )\r\n      }    \r\n}\r\n\r\nexport default Exchanger;\r\n\r\n/*\r\n<GalleryModal \r\n                    closeModal={this.closeModal} \r\n                    findPrev={this.findPrev} \r\n                    findNext={this.findNext} \r\n                    hasPrev={this.state.currentIndex > 0} \r\n                    hasNext={this.state.currentIndex + 1 < this.state.imgUrls.length} \r\n                    src={this.state.imgUrls[this.state.currentIndex]} \r\n                />\r\n\r\n                <CustomBtn disabled={this.state.swapId}  onClick={() => this.acceptExchange(\r\n                                                            this.state.swapId,\r\n                                                            this.state.nftAddresses[this.state.currentIndex],\r\n                                                            [this.state.nftIds[this.state.currentIndex]])} txt=\"Approve Exchange\"/>\r\n                */","import React from \"react\";\r\nimport { Peer } from \"peerjs\";\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myId: '',\r\n            friendId: '',\r\n            peer: {},\r\n            message: '',\r\n            messages: [],\r\n            nftSent: '',\r\n            nftReceived: '',\r\n            swapIdSent: null,\r\n            swapUserSent: null,\r\n            swapUser2Sent: null,\r\n            swapId: null,\r\n            swapUser: null,\r\n            swapUser2: null,\r\n            visited: false\r\n        };\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        const peer = new Peer(this.state.swapUserSent);\r\n\r\n        peer.on('open', (id) => {\r\n            this.setState({\r\n                myId: id,\r\n                peer: peer\r\n            });\r\n        });\r\n\r\n        peer.on(\"connection\", (conn) => {\r\n            conn.on(\"data\", (data) => {\r\n                console.log(data);\r\n                this.setState({\r\n                    nftReceived: data.nft,\r\n                    swapId: data.swapId,\r\n                    messages: [...this.state.messages, data]\r\n                });\r\n                console.log(this.state);\r\n            });\r\n        });\r\n\r\n    }*/\r\n\r\n    connect = () => {\r\n        const peer = new Peer(this.state.swapUserSent);\r\n\r\n        peer.on('open', (id) => {\r\n            this.setState({\r\n                myId: id,\r\n                peer: peer\r\n            });\r\n        });\r\n\r\n        peer.on(\"connection\", (conn) => {\r\n            conn.on(\"data\", (data) => {\r\n                console.log(data);\r\n                this.setState({\r\n                    nftReceived: data.nft,\r\n                    swapId: data.swapId,\r\n                    messages: [...this.state.messages, data]\r\n                });\r\n                console.log(this.state);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.nftSent !== this.state.nftSent) { \r\n            this.send();\r\n        }\r\n        \r\n        if (this.state.visited == false) { \r\n            this.setState({visited: true});\r\n            this.connect();\r\n        }\r\n      }\r\n\r\n    send = () => {\r\n        const conn = this.state.peer.connect(this.state.friendId);\r\n\r\n        conn.on('open', () => {\r\n\r\n            const msgObj = {\r\n                sender: this.state.myId,\r\n                message: this.state.message,\r\n                nft: this.state.nftSent,\r\n                swapId: this.state.swapIdSent\r\n            };\r\n\r\n\r\n            conn.send(msgObj);\r\n\r\n            this.setState({\r\n                messages: [...this.state.messages, msgObj],\r\n                message: ''\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.setState({\r\n            nftSent: this.props.nftSrc,\r\n            swapIdSent: this.props.swapId,\r\n            swapUserSent: this.props.swapUser,\r\n            swapUser2Sent: this.props.swapUser2\r\n        });\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n\r\n                <h1>The chatting service</h1>\r\n\r\n                <div className=\"col\">\r\n\r\n                    <h3>Your Room ID : {this.state.myId} </h3>\r\n\r\n                    Connect to:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.friendId}\r\n                        onChange={e => { this.setState({ friendId: e.target.value }); }} />\r\n                    <br />\r\n\r\n                    <label>Message:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.message}\r\n                        onChange={e => { this.setState({ message: e.target.value }); }} />\r\n                    <button onClick={this.send}>Send</button>\r\n\r\n                    {\r\n                        this.state.messages.map((message, i) => {\r\n                            return (\r\n                                <div key={i}>\r\n                                    <h3>{message.sender}:</h3>\r\n                                    <p>{message.message}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <h3>Your swap ID : {this.state.swapId || this.state.swapIdSent} </h3>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h3>Buying the following NFT</h3>\r\n                    <h4>Received</h4>\r\n                    <img src={this.state.nftReceived} width={250} height={250} />\r\n                    <h4>Sent</h4>\r\n                    <img src={this.state.nftSent} width={250} height={250} />\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;","import './App.css';\nimport { createMuiTheme, ThemeProvider, withStyles} from '@material-ui/core/styles';\nimport NavBar from './components/NavBar';\nimport {Typography} from '@material-ui/core'\nimport Footer from './components/Footer';\nimport Exchanger from './components/Exchanger';\nimport Chat from './components/Chat';\nimport React from 'react';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main:\"#2e1667\",\n    },\n    secondary: {\n      main:\"#c7d8ed\",\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Roboto'\n    ],\n    h4: {\n      fontWeight: 600,\n      fontSize: 28,\n      lineHeight: '2rem',\n      },\n    h5: {\n      fontWeight: 100,\n      lineHeight: '2rem',\n    },\n  },\n});\n\nconst useStyles = theme =>({\n  wrapper: {\n    width: \"65%\",\n    margin: \"auto\",\n    textAlign: \"center\"\n  },\n  bigSpace: {\n    marginTop: \"5rem\"\n  },\n  littleSpace:{\n    marginTop: \"2.5rem\",\n  },\n  grid:{\n    display: \"flex\", \n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\", \n  },\n})\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNFTChange = this.handleNFTChange.bind(this);\n    this.handleSwapChange = this.handleSwapChange.bind(this);\n    this.handleUserChange = this.handleUserChange.bind(this);\n    this.state = {nftSent: '',\n                  currentUser: null,\n                  swapId: null,\n                  swapUser: null,\n                  swapUser2: null,\n                  sendFunction: null};\n  }\n\n  handleNFTChange(nftSentSrc) {\n    this.setState({nftSent: nftSentSrc});\n  }\n\n  handleSwapChange(swapId_, swapUser_, swapUser2_){\n    this.setState({swapId: swapId_,\n                  swapUser: swapUser_,\n                  swapUser2: swapUser2_});\n\n  }\n\n  handleUserChange(user_){\n    this.setState({currentUser: user_});\n  }\n\n  render(){\n    const { classes } = this.props;\n    \n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n          <NavBar \n            onFinalUserChange = {this.handleUserChange}/>\n          <div className={classes.wrapper}>\n            <Typography variant=\"h4\" className={classes.bigSpace} color=\"primary\">\n              These are the NFTs linked to your wallet\n            </Typography>\n            <Typography variant=\"h5\" className={classes.littleSpace} color=\"primary\">\n              You can browse these NFTs by clicking on them and selecting which one to trade. The one selected will be displayed by itself and will be tradeable\n            </Typography>\n          </div>\n          <Exchanger \n            user = {this.state.currentUser}\n            onNFTChange={this.handleNFTChange}\n            onSwapChange={this.handleSwapChange}/>\n          <div className={classes.bigSpace}>\n            <Chat \n              nftSrc = {this.state.nftSent}\n              swapId = {this.state.swapId}\n              swapUser = {this.state.currentUser}\n              swapUser2 = {this.state.swapUser2}/>\n          </div>\n          <div className={classes.bigSpace}>\n            <Footer/>\n          </div>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\n/*\n<div className={`${classes.grid} ${classes.bigSpace}`}>\n          <Grid icon={<SecurityIcon style={{fill: \"#4360A6\", height:\"125\", width:\"125\"}}/>}  title=\"Secure\" btnTitle=\"Show me More\" />\n          <Grid icon={<EventNoteIcon style={{fill: \"#449A76\", height:\"125\", width:\"125\"}}/>} title=\"Reliable\" btnTitle=\"Show me More\"/>\n          <Grid icon={<TrendingUpIcon style={{fill: \"#D05B2D\", height:\"125\", width:\"125\"}}/>}  title=\"Performant\" btnTitle=\"Show me More\"/>\n        </div>\n        <div className={`${classes.grid} ${classes.littleSpace}`}>  \n          <Grid icon={<ImportExportIcon style={{fill: \"#5EA780\", height:\"125\", width:\"125\"}}/>}  title=\"Modular\" btnTitle=\"Show me More\"/>\n          <Grid icon={<ComputerIcon style={{fill: \"#E69426\", height:\"125\", width:\"125\"}}/>}  title=\"Multi-Platform\" btnTitle=\"Show me More\"/>\n          <Grid icon={<HttpIcon style={{fill: \"#2EA09D\", height:\"125\", width:\"125\"}}/>} title=\"Connected\" btnTitle=\"Show me More\"/>\n        </div>\n*/\nexport default withStyles(useStyles)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}